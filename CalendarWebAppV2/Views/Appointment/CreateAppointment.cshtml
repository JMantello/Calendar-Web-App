@model CreateAppointmentVM;

@{
    var minDate = DateTime.Now;
}

@*<style>
    .e-calendar {
    background-color: aliceblue;
    border: 2px solid gray;
}
</style>*@

<div class="container py-4 m-auto">

    <div class="row pb-4">
        <p class="lead">Meet with @Model.User.FirstName @Model.User.LastName</p>
    </div>

    <div class="row justify-content-center">
        @*Left side: Calender*@
        <div class="col-md-5 pb-4">
            <form>
                <ejs-calendar id="calendar"
                              min="minDate"
                              class="m-auto e-bigger"
                              change="getDateSelection"></ejs-calendar>
            </form>
        </div>

        @*Right side: Time Selector*@
        <div class="col-md-7 px-4">
            <div class="container">
                @*Meeting Length Selector*@
                <h6 class="row pb-3">Duration:</h6>

                <div class="row btn-group btn-group-toggle d-flex justify-content-center"
                     data-toggle="buttons"
                     for="durationSelection">
                    <label class="btn btn-secondary active">
                        <input type="radio" name="durationOption" value="15" id="btn-15-mins" checked onchange="renderTimeslots()"> 15 mins
                    </label>
                    <label class="btn btn-secondary">
                        <input type="radio" name="durationOption" value="30" id="btn-30-mins" onchange="renderTimeslots()"> 30 mins
                    </label>
                    <label class="btn btn-secondary">
                        <input type="radio" name="durationOption" value="60" id="btn-1-hour" onchange="renderTimeslots()"> 1 hour
                    </label>
                </div>

                @*Time Selector*@
                <h6 class="row pt-4 pb-2">Available Time Slots:</h6>

                <div class="row list-group " id="timeslots">
                    @* Template
                    <a href="#" class="list-group-item list-group-item-action text-center">8:00 AM</a>
                    <a href="#" class="list-group-item list-group-item-action text-center">8:15 AM</a>
                    <a href="#" class="list-group-item list-group-item-action text-center">8:30 AM</a>*@
                </div>

            </div>
        </div>
    </div>

</div>

<script>
    let model = null;
    let appointments = null;
    let availability = null;
    let timeslotsElem = null;
    let dateSelection = null;
    let durationValue = null;
    let DateTime = luxon.DateTime;

    window.onload = (event) => {
        model = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        appointments = model.appointments;
        availability = model.user.usersAvailability;
        timeslotsElem = document.getElementById("timeslots");
        dateSelection = DateTime.now();
        renderTimeslots();
    };

    function getDateSelection(args) {
        var intl = new ej.base.Internationalization();
        var value = intl.formatDate(args.value, { type: 'dateTime', format: 'dd/MM/yyyy' });
        dateSelection = DateTime.fromFormat(value, 'dd/MM/yyyy');
        renderTimeslots();
    }

    function reformatDate(date) {
        // dd/MM/yyyy --> MM/dd/yyyy
        const [day, month, year] = date.split('/');
        const result = [month, day, year].join('/');
        return result;
    }

    function toLuxon(dateIn) {
        let parsedDate = DateTime.fromISO(dateIn);

        if (!parsedDate.isValid) {
            parsedDate = DateTime.fromFormat(dateIn, "MM/dd/yyyy");
        }

        if (!parsedDate.isValid) {
            parsedDate = DateTime.fromFormat(dateIn, "M/dd/yyyy");
        }

        if (!parsedDate.isValid) {
            parsedDate = "Non-valid date - from toLuxon";
        }

        return parsedDate;
    }

    function getDurationValue() {
        durationValue = document.querySelector('input[name="durationOption"]:checked').value;
    }

    function renderTimeslots() {
        // Clear timeslots section
        timeslotsElem.textContent = "";

        // Get duration
        getDurationValue();

        // Get day's availability
        let daysAvailability = availability.filter(a => a.dayOfWeek == dateSelection.weekday);

        // Get appointments within day
        let sameDayAppointments = [];

        sameDayAppointments = appointments.filter(appointment =>
            dateSelection.toLocaleString() == toLuxon(appointment.start).toLocaleString()
            ||
            dateSelection.toLocaleString() == toLuxon(appointment.end).toLocaleString()
        );

        // Render timeslots
        if (daysAvailability.length == 0) { timeslotsElem.innerText = "No available times today."; }
        else {
            daysAvailability.forEach(da => {
                // Convert date inputs to date object
                let startDateString = dateSelection.toISODate() + "T" + da.startTime;
                let endDateString = dateSelection.toISODate() + "T" + da.endTime;

                let startDateTime = toLuxon(startDateString);
                let endDateTime = toLuxon(endDateString);

                let counter = startDateTime;

                // "Build" the timeslots - Count through startTime to endTime
                while (counter < endDateTime) {
                    
                    // Check for appointment conflicts
                    sameDayAppointments.forEach(appointment => {
                        let appointmentStart = toLuxon(appointment.start);
                        let appointmentEnd = toLuxon(appointment.end);

                        // Fast forward >> the counter to end of appointment if conflict
                        while (appointmentStart <= counter && counter < appointmentEnd) {
                            counter = counter.plus({ minutes: durationValue });
                        }
                    });

                    // Create HTML for Available Timeslot
                    let timeOption = document.createElement("a");

                    timeOption.classList.add("list-group-item");
                    timeOption.classList.add("list-group-item-action");
                    timeOption.classList.add("text-center");

                    let displayTime = counter.toLocaleString(DateTime.TIME_SIMPLE);

                    timeOption.innerText = displayTime;

                    // Increase counter
                    counter = counter.plus({ minutes: durationValue });

                    // Append timeslot element
                    timeslotsElem.appendChild(timeOption);
                }
            });
        }
    }

</script>

