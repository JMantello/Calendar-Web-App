@model ScheduleVM;

@{
    var minDate = DateTimeOffset.Now;
    string hostName = Model.Host.FirstName + " " + Model.Host.LastName;
}

<style>
    .e-calendar {
        /* background-color: white;*/
        border: none;
        padding: 10px;
    }

    .scrollable-height {
        height: 470px;
    }

    .timeslot {
        cursor: pointer;
        border-radius: 5px;
    }
     
    .timeslot:hover {
        background-color: azure;
    }

    .rounded-top-left {
        border-top-left-radius: 3px !important;
    }

</style>
<br />
<div class="card bg-light m-auto shadow rounded pb-2">
    <div class="card-header p-0 ">
        <div class="d-sm-flex">
            @*Profile Image*@
            <div class="" height="200" width="200">
                <img src="~/ProfileImages/@Model.Host.ProfileImage"
                     alt="@hostName Profile Image"
                     class="rounded-top-left" height="200" width="200">
            </div>

            <div class="p-3 flex-fill text-center">
                <p class="lead">Scheduling with @hostName</p>
                <p>@Model.Host.Email
                    @if(!String.IsNullOrEmpty(Model.Host.Phone))
                    {
                        <span> | @Model.Host.Phone</span>
                    }
                </p>
            </div>


        </div>
    </div>
    <br />

    <div class="row justify-content-center p-1">
        @*Left side: Calender*@
        <div class="col-md-5 pb-4">
            <ejs-calendar id="calendar"
                          min="minDate"
                          class="m-auto e-bigger"
                          change="getDateSelection"></ejs-calendar>
        </div>

        @*Right side: Time Selector*@
        <div class="col-md-7 px-4">
            @*Meeting Length Selector*@
            <div class="btn-group btn-group-toggle d-flex justify-content-center"
                 data-toggle="buttons"
                 for="durationSelection">
                <label class="btn btn-secondary active">
                    <input type="radio" name="durationOption" value="15" id="btn-15-mins" checked onchange="renderTimeslots()"> 15 mins
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" name="durationOption" value="30" id="btn-30-mins" onchange="renderTimeslots()"> 30 mins
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" name="durationOption" value="60" id="btn-60-mins" onchange="renderTimeslots()"> 60 mins
                </label>
            </div>

            @*Time Selector*@
            <h6 class="pt-4 pb-2 px-2">Time Slots:</h6>

            <div class="scrollable-height overflow-auto scrollbar-primary pr-2 pb-2">
                <form id="dateTimeForm" asp-controller="Appointments" asp-action="Schedule" method="post">
                    <div class="row list-group w-95 m-0 text-center" id="timeslots">
                        @* Template
                        <a href="#" class="list-group-item list-group-item-action text-center">8:00 AM</a>
                        <a href="#" class="list-group-item list-group-item-action text-center">8:15 AM</a>
                        <a href="#" class="list-group-item list-group-item-action text-center">8:30 AM</a>*@
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>

<script>
    let model = null;
    let hostId = null;
    let appointments = null;
    let availability = null;
    let timeslotsElem = null;
    let dateSelection = null;
    let durationValue = null;
    let DateTime = luxon.DateTime;

    window.onload = (event) => {
        model = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        hostId = model.host.id;
        appointments = model.appointments;
        availability = model.host.hostAvailability;
        timeslotsElem = document.getElementById("timeslots");
        dateSelection = DateTime.now();
        renderTimeslots();

        console.log(model);
    };

    function getDateSelection(args) {
        var intl = new ej.base.Internationalization();
        var value = intl.formatDate(args.value, { type: 'dateTime', format: 'dd/MM/yyyy' });
        dateSelection = DateTime.fromFormat(value, 'dd/MM/yyyy');
        renderTimeslots();
    }

    function reformatDate(date) {
        // dd/MM/yyyy --> MM/dd/yyyy
        const [day, month, year] = date.split('/');
        const result = [month, day, year].join('/');
        return result;
    }

    function toLuxon(dateIn) {
        let parsedDate = DateTime.fromISO(dateIn);

        if (!parsedDate.isValid) {
            parsedDate = DateTime.fromFormat(dateIn, "MM/dd/yyyy");
        }

        if (!parsedDate.isValid) {
            parsedDate = DateTime.fromFormat(dateIn, "M/dd/yyyy");
        }

        if (!parsedDate.isValid) {
            parsedDate = "Non-valid date - from toLuxon";
        }

        return parsedDate;
    }

    function getDurationValue() {
        durationValue = document.querySelector('input[name="durationOption"]:checked').value;
    }

    function renderTimeslots() {
        // Clear timeslots section
        timeslotsElem.textContent = "";

        // Get duration
        getDurationValue();

        // Get day's availability
        let daysAvailability = availability.filter(a => a.dayOfWeek == dateSelection.weekday);

        // Get appointments within day
        let sameDayAppointments = [];

        sameDayAppointments = appointments.filter(appointment =>
            dateSelection.toLocaleString() == toLuxon(appointment.start).toLocaleString()
            ||
            dateSelection.toLocaleString() == toLuxon(appointment.end).toLocaleString()
        );

        // Render timeslots HTML
        if (daysAvailability.length == 0) { timeslotsElem.innerText = "No available times."; }
        else {
            // Create hidden userId input
            let userIdInputElem = document.createElement("input");
            userIdInputElem.setAttribute("name", "hostId");
            userIdInputElem.setAttribute("value", hostId);
            userIdInputElem.setAttribute("hidden", "true");
            timeslotsElem.appendChild(userIdInputElem);

            // Create hidden date input element
            let dateInputElem = document.createElement("input");
            dateInputElem.setAttribute("id", "dateTimeInput");
            dateInputElem.setAttribute("name", "dateTimeSelection");
            dateInputElem.setAttribute("value", "");
            dateInputElem.setAttribute("hidden", "true");
            timeslotsElem.appendChild(dateInputElem);

            // Create hidden duration input element
            let durationInputElem = document.createElement("input");
            durationInputElem.setAttribute("id", "durationInput");
            durationInputElem.setAttribute("name", "duration");
            durationInputElem.setAttribute("value", durationValue);
            durationInputElem.setAttribute("hidden", "true");
            timeslotsElem.appendChild(durationInputElem);

            // Create timeslots for each entry in users availability
            daysAvailability.forEach(da => {
                // Convert date inputs to date object
                let startDateString = dateSelection.toISODate() + "T" + da.startTime;
                let endDateString = dateSelection.toISODate() + "T" + da.endTime;
                let startDateTime = toLuxon(startDateString);
                let endDateTime = toLuxon(endDateString);

                let dayCounter = startDateTime;
                let now = DateTime.now();

                if (dayCounter.toISODate() == now.toISODate()) {
                    // Advance counter to current time, ensuring no past times are generated
                    while (dayCounter < now) {
                        dayCounter = dayCounter.plus({ minutes: durationValue });
                    }
                }

                /*  Unaddressed cases:
                     -Check case where duration is 1hr but start time is not on the hour
                */

                // Generate the timeslots
                let timeslots = [];

                while (dayCounter < endDateTime) {

                    // Check for appointment conflicts
                    sameDayAppointments.forEach(appointment => {
                        let appointmentStart = toLuxon(appointment.start);
                        let appointmentEnd = toLuxon(appointment.end);

                        // Fast forward >> the counter to end of appointment if conflict
                        while (appointmentStart <= dayCounter && dayCounter < appointmentEnd) {
                            dayCounter = dayCounter.plus({ minutes: durationValue });
                        }

                        // Are we checking so that we don't put out a timeslot that will conflict
                        // with an existing appointment?
                        // i.e -> making a 1 hour timeslot at 10:00AM that conflicts with
                        // a 15 minute 10:45AM appointment
                    });

                    // Create HTML for Available Timeslot
                    let timeOption = document.createElement("a");
                    timeOption.classList.add("list-group-item");
                    timeOption.classList.add("list-group-item-action");
                    timeOption.classList.add("text-center");
                    timeOption.classList.add("timeslot");
                    timeOption.setAttribute("value", dayCounter.toISO());
                    timeOption.setAttribute("onclick", "submitForm(this)");

                    let displayTime = dayCounter.toLocaleString(DateTime.TIME_SIMPLE);
                    timeOption.innerText = displayTime;

                    // Increase counter
                    dayCounter = dayCounter.plus({ minutes: durationValue });

                    // Push timeslot element
                    timeslots.push(timeOption);
                }

                // Append timeslots or empty message
                if (timeslots.length == 0) {
                    timeslotsElem.innerText = "No available times.";
                } else {
                    timeslots.forEach(timeOption => {
                        timeslotsElem.appendChild(timeOption);
                    });
                }

            });
        }
    }

    function submitForm(sender) {
        // Set dateTimeInput value from sender
        let dateTimeInput = document.getElementById("dateTimeInput");
        dateTimeInput.value = sender.getAttribute("value");

        // Submit form
        let dateTimeForm = document.getElementById("dateTimeForm");
        dateTimeForm.submit();
    }

</script>

